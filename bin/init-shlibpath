#!/usr/bin/env bash

# Copyright 2022 Rawiri Blundell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# TODO: Test if SH_LIBPATH is already set

# TODO: Linux: Test if SH_LIBPATH is defined in /etc/profile.d/00_SH_LIBPATH

# Start up SH_STACK
SH_STACK=()
sh_stack_add() {
  _sh_stack_depth='=>'
  case "${1}" in
    (-[0-9]*)
      _sh_stack_i=1
      while (( _sh_stack_i < "${1/-/}" )); do
        _sh_stack_depth="${_sh_stack_depth}>"
        _sh_stack_i=$(( _sh_stack_i + 1 ))
      done
      shift 1
    ;;
  esac
  SH_STACK=( "${SH_STACK[@]}" "$(date +%Y%m%d_%H:%M:%S_%Z): ${_sh_stack_depth} ${*}" )
  unset -v _sh_stack_depth _sh_stack_i
}
sh_stack_add "START"

sh_stack_dump() {
  printf -- '%s\n' "" "${SH_STACK[@]}"
  [ -t 0 ] && return 1
}

# Potential basepaths for where our libraries might be placed
POSSIBLE_SH_LIBPATHS=(
  "${HOME}"/git/sh_libpath/lib/sh
  "${HOME}"/.local/lib/sh
  /usr/local/lib/sh
  /opt/sh_libpath/lib/sh
  /usr/share/misc
)

# we dynamically build SH_LIBPATH as a var and an array
unset -v SH_LIBPATH SH_LIBPATH_ARRAY
for _path in "${POSSIBLE_SH_LIBPATHS[@]}"; do
  if [ -d "${_path}" ]; then
    sh_stack_add "SH_LIBPATH: checking if ${_path} exists... found!"
    SH_LIBPATH="${SH_LIBPATH}:${_path}"
    SH_LIBPATH_ARRAY+=( "${_path}" )
  else
    sh_stack_add "SH_LIBPATH: checking if ${_path} exists... not found."
  fi
done
unset -v _path
# Remove any leading colons from the construction process and export
SH_LIBPATH="${SH_LIBPATH#:}"

# If FPATH or fpath are present in the environment, append them
if (( ${#FPATH} > 0 )); then
  SH_LIBPATH="${SH_LIBPATH}:${FPATH}"
fi

if (( ${#fpath} > 0 )); then
  SH_LIBPATH="${SH_LIBPATH}:${fpath}"
fi

# Now, de-duplicate
SH_LIBPATH=$(printf -- '%s\n' "${SH_LIBPATH}" | tr ':' '\n' |  awk '!s[$0]++' | paste -sd ':' -)

# Finally, export
export SH_LIBPATH

# Check the length of the var again and fail out if it's empty
if (( "${#SH_LIBPATH}" == 0 )); then
  printf -- '%s\n' "SH_LIBPATH appears to be empty" >&2
  if [ -t 0 ]; then
    return 1
  else
    exit 1
  fi
fi

sh_stack_add "SH_LIBPATH: ${SH_LIBPATH}"

# TODO: Update to parse first-found library only
# Or update to present the reverse e.g.
# Function 'is()' provided by the following libraries: a, b, c
# TODO: Evolve to add function description parsing?
# e.g.
# funcname() {
#   # Description: This function converts a into b
# Take the description and present it in the output of this function
# TODO: Add status e.g.
# Library                Status
# -----------------------------
# alt_strcaps.sh         Loaded
# -> alt_strcaps()       Loaded
ls_shlibs() {
  for _element in "${SH_LIBPATH_ARRAY[@]}"; do
    while read -r _library_file; do
      if grep '() {' "${_library_file}" >/dev/null 2>&1; then
        printf -- '%s:\n' "${_library_file}"
        grep '() {' "${_library_file}" | 
          grep -v '#' |
          sed -e "s/^/  --> /" -e 's/() {.*//g' |
          sort |
          uniq
      fi
    done < <(find "${_element}" -type f)
  done
  unset -v _element _library_file
}

_is_function_loaded() {
  typeset -f "${1:?No function defined}" >/dev/null
}

_is_lib_loaded() {
  _is_lib_loaded_target="${1:?No library defined}"
  if [ "${SH_LIBS_LOADED#*"$_is_lib_loaded_target"}" != "${SH_LIBS_LOADED}" ]; then
    unset -v _is_lib_loaded_target
    if [ -t 0 ]; then
      return 0
    else
      exit 0
    fi
  else
    unset -v _is_lib_loaded_target
    if [ -t 0 ]; then
      return 1
    else
      exit 1
    fi
  fi
}

# Find and load include()
for _sh_libdir_path in "${SH_LIBPATH_ARRAY[@]}"; do
  if [ -r "${_sh_libdir_path}/core/include.sh" ]; then
    . "${_sh_libdir_path}/core/include.sh"
    unset -v _sh_libdir_path
    break
  fi
done

# Fail if include isn't loaded
if ! command -v include >/dev/null 2>&1; then
  printf -- '%s\n' "Unable to load include.sh from SH_LIBPATH" >&2
  unset -v _sh_libdir_path
  if [ -t 0 ]; then
    return 1
  else
    exit 1
  fi
fi

# Now that we've got include() bootstrapped, let's load requires
include core/requires.sh
