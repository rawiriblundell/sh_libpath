#!/usr/bin/env bash

# Copyright 2022 Rawiri Blundell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# TODO: include [url] --> download code to temporary location, source, destroy afterwards?

#### Usage examples:
# Attempt to source a library from a given full path
# include /opt/company/libs/sh/library.sh
#
# Attempts to locate the subdir 'units' within SH_LIBPATH and sources all the libraries within it
# include units
#
# Attempts to locate and source the library "puts.sh" within SH_LIBPATH
# include text/puts
#
# Attempts to locate and source the library "puts.bash" within SH_LIBPATH
# include text/puts.bash
#
sh_stack_add -2 "Entering 'include()' and processing ${#} found arg(s): '${*}'"

# Ensure that SH_LIBPATH has some substance, otherwise why bother?
if (( "${#SH_LIBPATH}" == 0 )); then
    sh_stack_dump
    printf -- 'include: %s\n' "SH_LIBPATH appears to be empty" >&2
    if [ -t 0 ]; then
        return 1
    else
        exit 1
    fi
fi

# Ensure that we have an arg to parse
if (( "${#}" == 0 )); then
    sh_stack_dump
    printf -- 'include: %s\n' "No args given" >&2
    if [ -t 0 ]; then
        return 1
    else
        exit 1
    fi
fi

# Assign our target to a var
_include_target="${1}"

# Ensure that it's not already loaded
# TO-DO: Add option to include() to ignore this test and (forcibly?) reload
_is_lib_loaded "${_include_target}" && return 0

# Is it a full path to a readable file?
# Example: include /opt/something/specific/library.sh
sh_stack_add -2 "Is '${_include_target}' a full path to a file?"
if [ -f "${_include_target}" ]; then
    sh_stack_add -3 "Full path: '${_include_target}' exists.  Is it readable?"
    if [ -r "${_include_target}" ]; then
        sh_stack_add -4 "Full path: '${_include_target}' readable.  Loading."
        # shellcheck disable=SC1090
        if . "${_include_target}"; then
            # Add the library to SH_LIBS_LOADED
            SH_LIBS_LOADED="${SH_LIBS_LOADED} ${_include_target}"
            # Strip the leading space char
            SH_LIBS_LOADED="${SH_LIBS_LOADED# }"
            export SH_LIBS_LOADED
            unset -v _include_target
            return 0
        else
            sh_stack_add -5 "Full path: '${_include_target}' readable but not loadable.  Failing."
            sh_stack_dump
            printf -- 'include: %s\n' "Error while includeing '${_include_target}'" >&2
            unset -v _include_target
            if [ -t 0 ]; then
                return 1
            else
                exit 1
            fi
        fi
    else
        sh_stack_add -4 "Full path: '${_include_target}' unreadable.  Failing."
        sh_stack_dump
        printf -- 'include: %s\n' "Insufficient permissions while includeing '${_include_target}'" >&2
        unset -v _include_target
        if [ -t 0 ]; then
            return 1
        else
            exit 1
        fi
    fi
fi
sh_stack_add -2 "'${_include_target}' is apparently not a full path to a file."

# If it's not a full path, we work through a sequence of tests:
# Is it a subdir within SH_LIBPATH e.g. include text
# Is it a subdir/library with an explicit extension e.g. include text/puts.bash
# Is it a subdir/library with an implicit extension (i.e. ".sh" default) e.g. include text/puts
for _element in "${SH_LIBPATH_ARRAY[@]}"; do
    # Is the given target a subdir within $_element?  If so, load everything within that path.
    # Note: we only load everything with a .sh extension
    # We don't want to try loading library.zsh into bash, for example
    sh_stack_add -2 "Is '${_include_target}' a sub-directory within ${_element}?"
    if [ -d "${_element}/${_include_target}" ]; then
        _subdir="${_element}/${_include_target}"
        sh_stack_add -3 "Loading all libraries and functions from '${_subdir}'"
        for _load_target in "${_subdir}"/*.sh; do
            # Ensure that it's not already loaded
            _is_lib_loaded "${_load_target}" && continue
            if [ -r "${_load_target}" ]; then
                # shellcheck disable=SC1090
                . "${_load_target}" || {
                sh_stack_dump
                printf -- 'include: %s\n' "Failed to load '${_load_target}'" >&2
                unset -v _element _subdir _load_target _include_target
                if  [ -t 0 ]; then
                    return 1
                else
                    exit 1
                fi
                }
                SH_LIBS_LOADED="${SH_LIBS_LOADED} ${_load_target}"
                SH_LIBS_LOADED="${SH_LIBS_LOADED# }"
                unset -v _element _subdir _load_target _include_target
            else
                sh_stack_dump
                printf -- 'include: %s\n' "Insufficient permissions while includeing '${_load_target}'" >&2
                unset -v _element _subdir _load_target _include_target
                if  [ -t 0 ]; then
                return 1
                else
                exit 1
                fi
            fi
        done
        export SH_LIBS_LOADED
        unset -v _element _subdir _load_target _include_target
        if  [ -t 0 ]; then
            return 0
        else
            exit 0
        fi
    fi
    sh_stack_add -2 "'${_include_target}' is apparently not a sub-directory within ${_element}."

    # With the above scenario out of the way, we now assess the following in order:
    # include subdir/library.extension (e.g. include text/tolower.sh)
    #     This scenario allows us to load shell specific libs e.g. text/tolower.zsh
    # include subdir/library           (e.g. include text/tolower)
    #     This scenario defaults to the .sh extension i.e. text/tolower = text/tolower.sh
    sh_stack_add -2 "Is '${_include_target}' a relative path within ${_element}?"
    if [ -f "${_element}/${_include_target}" ]||[ -f "${_element}/${_include_target}.sh" ]; then
        sh_stack_add -3 "Relative path: '${_element}/${_include_target}' exists.  Is it readable?"
        if [ -r "${_element}/${_include_target}" ]; then
            _load_target="${_element}/${_include_target}"
        elif [ -r "${_element}/${_include_target}.sh" ]; then
            _load_target="${_element}/${_include_target}.sh"
        else
            sh_stack_dump
            printf -- 'include: %s\n' "Insufficient permissions while includeing '${_include_target}' from '${_element}'" >&2
            unset -v _element _include_target
            if  [ -t 0 ]; then
                return 1
            else
                exit 1
            fi
        fi

        # shellcheck disable=SC1090
        . "${_load_target}" || {
        printf -- 'include: %s\n' "Failed to load '${_load_target}'" >&2
        if  [ -t 0 ]; then
            return 1
        else
            exit 1
        fi
        }
        SH_LIBS_LOADED="${SH_LIBS_LOADED} ${_load_target}"
        SH_LIBS_LOADED="${SH_LIBS_LOADED# }"
        unset -v _element _include_target _load_target
        return 0
    else
        sh_stack_add -2 "Is '${_include_target}' a relative path within ${_element}?"
    fi
done

# If we're here, then 'include()' wasn't called correctly
sh_stack_dump
printf -- 'include: %s\n' "Unspecified error while executing 'include ${*}'" >&2
unset -v _subdir _function _subdir_path _include_target
if  [ -t 0 ]; then
    return 1
else
    exit 1
fi
